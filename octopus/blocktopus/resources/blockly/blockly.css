.blocklySvg {
  background-color: #fff;
  border-color: #e2e2e2;
  border-style: solid;
  border-width: 0 1px;
  overflow: hidden;  /* IE overflows by default. */
}

.blocklyWidgetDiv {
  position: absolute;
  display: none;
  z-index: 999;
}

.blocklyDraggable {
    /*
      Hotspot coordinates are baked into the CUR file, but they are still
      required in the CSS due to a Chrome bug.
      http://code.google.com/p/chromium/issues/detail?id=1446
    */
  cursor: url(media/handopen.cur) 8 5, auto;
}

.blocklyResizeSE {
  fill: #aaa;
  cursor: se-resize;
}

.blocklyResizeSW {
  fill: #aaa;
  cursor: sw-resize;
}

.blocklyResizeLine {
  stroke-width: 1;
  stroke: #888;
}

.blocklyHighlightedConnectionPath {
  stroke-width: 4px;
  stroke: #fc3;
  fill: none;
}

.blocklyPathLight {
  fill: none;
  stroke-width: 2;
  stroke-linecap: round;
}

.blocklySelected>.blocklyPath {
  stroke-width: 3px;
  stroke: #fc3;
}

.blocklySelected>.blocklyPathLight {
  display: none;
}

.blocklyDragging>.blocklyPath,
.blocklyDragging>.blocklyPathLight {
  fill-opacity: .8;
  stroke-opacity: .8;
}

.blocklyDragging>.blocklyPathDark {
  display: none;
}

.blocklyDisabled>.blocklyPath {
  fill-opacity: .5;
  stroke-opacity: .5;
}

.blocklyDisabled>.blocklyPathLight,
.blocklyDisabled>.blocklyPathDark {
  display: none;
}

.blocklyCommentText {
  cursor: default;
  font-family: sans-serif;
  font-size: 15pt;
  font-weight: bold;
}

.blocklyText {
  cursor: default;
  font-family: sans-serif;
  font-size: 11pt;
  fill: #fff;
}

.blocklyNonEditableText>text {
  pointer-events: none;
}

.blocklyNonEditableText>rect,
.blocklyEditableText>rect {
  fill: #fff;
  fill-opacity: .6;
}

.blocklyNonEditableText>text,
.blocklyEditableText>text {
  fill: #000;
}

.blocklyEditableText:hover>rect {
  stroke-width: 2;
  stroke: #fff;
}

.blocklyBubbleText {
  fill: #000;
}

  /*
    Don't allow users to select text.  It gets annoying when trying to
    drag a block and selected text moves instead.
  */
.blocklySvg text {
  -moz-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  cursor: inherit;
}

.blocklyHidden {
  display: none;
}

.blocklyFieldDropdown:not(.blocklyHidden) {
  display: block;
}

.blocklyTooltipBackground {
  fill: #ffffc7;
  stroke-width: 1px;
  stroke: #d8d8d8;
}

.blocklyTooltipShadow,
.blocklyDropdownMenuShadow {
  fill: #bbb;
  filter: url(#blocklyShadowFilter);
}

.blocklyTooltipText {
  font-family: sans-serif;
  font-size: 9pt;
  fill: #000;
}

.blocklyIconShield {
  cursor: default;
  fill: #00c;
  stroke-width: 1px;
  stroke: #ccc;
}

.blocklyIconGroup:hover>.blocklyIconShield {
  fill: #00f;
  stroke: #fff;
}

.blocklyIconGroup:hover>.blocklyIconMark {
  fill: #fff;
}

.blocklyIconMark {
  cursor: default !important;
  font-family: sans-serif;
  font-size: 9pt;
  font-weight: bold;
  fill: #ccc;
  text-anchor: middle;
}

.blocklyWarningBody {
}

.blocklyMinimalBody {
  margin: 0;
  padding: 0;
}

.blocklyCommentTextarea {
  margin: 0;
  padding: 2px;
  border: 0;
  resize: none;
  background-color: #ffc;
}

.blocklyHtmlInput {
  font-family: sans-serif;
  font-size: 11pt;
  border: none;
  outline: none;
  width: 100%
}

.blocklyMutatorBackground {
  fill: #fff;
  stroke-width: 1;
  stroke: #ddd;
}

.blocklyFlyoutBackground {
  fill: #ddd;
  fill-opacity: .8;
}

.blocklyColourBackground {
  fill: #666;
}

.blocklyScrollbarBackground {
  fill: #fff;
  stroke-width: 1;
  stroke: #e4e4e4;
}

.blocklyScrollbarKnob {
  fill: #ccc;
}

.blocklyScrollbarBackground:hover+.blocklyScrollbarKnob,
.blocklyScrollbarKnob:hover {
  fill: #bbb;
}

.blocklyInvalidInput {
  background: #faa;
}

.blocklyAngleCircle {
  stroke: #444;
  stroke-width: 1;
  fill: #ddd;
  fill-opacity: .8;
}

.blocklyAngleMarks {
  stroke: #444;
  stroke-width: 1;
}

.blocklyAngleGauge {
  fill: #f88;
  fill-opacity: .8;  
}

.blocklyAngleLine {
  stroke: #f00;
  stroke-width: 2;
  stroke-linecap: round;
}

.blocklyContextMenu {
  border-radius: 4px;
}

.blocklyDropdownMenu {
  padding: 0 !important;
}

  /* Override the default Closure URL. */
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,
.blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {
  background: url(media/sprites.png) no-repeat -48px -16px !important;
}

  /* Category tree in Toolbox. */
.blocklyToolboxDiv {
  background-color: #ddd;
  display: none;
  overflow-x: visible;
  overflow-y: auto;
  position: absolute;
}

.blocklyTreeRoot {
  padding: 4px 0;
}

.blocklyTreeRoot:focus {
  outline: none;
}

.blocklyTreeRow {
  line-height: 22px;
  height: 22px;
  padding-right: 1em;
  white-space: nowrap;
}

.blocklyToolboxDiv[dir="RTL"] .blocklyTreeRow {
  padding-right: 0;
  padding-left: 1em !important;
}

.blocklyTreeRow:hover {
  background-color: #e4e4e4;
}

.blocklyTreeIcon {
  height: 16px;
  width: 16px;
  vertical-align: middle;
  background-image: url(media/sprites.png);
}

.blocklyTreeIconClosedLtr {
  background-position: -32px -1px;
}

.blocklyTreeIconClosedRtl {
  background-position: 0px -1px;
}

.blocklyTreeIconOpen {
  background-position: -16px -1px;
}

.blocklyTreeSelected>.blocklyTreeIconClosedLtr {
  background-position: -32px -17px;
}

.blocklyTreeSelected>.blocklyTreeIconClosedRtl {
  background-position: 0px -17px;
}

.blocklyTreeSelected>.blocklyTreeIconOpen {
  background-position: -16px -17px;
}

.blocklyTreeIconNone,
.blocklyTreeSelected>.blocklyTreeIconNone {
  background-position: -48px -1px;
}

.blocklyTreeLabel {
  cursor: default;
  font-family: sans-serif;
  font-size: 16px;
  padding: 0 3px;
  vertical-align: middle;
}

.blocklyTreeSelected  {
  background-color: #57e !important;
}

.blocklyTreeSelected .blocklyTreeLabel {
  color: #fff;
}

/*
 Running blocks
*/

g.state-running > .blocklyPath,
g.state-paused > .blocklyPath,
g.state-cancelled > .blocklyPath,
g.state-error > .blocklyPath {
  stroke-width: 3px;
}

g.state-running > .blocklyPath {
  stroke: #33B000;
}

g.state-paused > .blocklyPath {
  stroke: #FFAE00;
}

g.state-cancelled > .blocklyPath {
  stroke: #bbb;
}

g.state-error > .blocklyPath {
  stroke: #B80000;
}

g.state-running > .blocklyPathLight,
g.state-paused > .blocklyPathLight,
g.state-cancelled > .blocklyPathLight,
g.state-error > .blocklyPathLight {
  display: none;
}